/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application;

import AssemblyModule.ArmParser;
import AssemblyModule.Server_AllInOne;
import AssemblyModule.Server_StepByStep;
import application.TextEditor;
import application.swing_utils.MemoryViewer;
import application.swing_utils.RamViewer;
import cache.Cache;
import cache.Controler;
import cache.Ram;
import cache.exception.AddressNotAlignedException;
import cache.type.Unit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;
import test.TU;

/**
 *
 * @author leo
 */
public final class CacheSimulator extends javax.swing.JFrame {
    private final List<Cache> leftMem, rightMem;
    private Cache ram;
    private int leftIndex, rightIndex;

    /**
     * Creates new form CacheSimulator
     */
    public CacheSimulator() {
        leftMem = new ArrayList<>(3);
        rightMem = new ArrayList<>(3);
        
        initComponents();
        initMemoryViewer();
        initRam();
        filesEditor = new TextEditor();
    }
    
    private void initRam() {
        ramViewer = new RamViewer();
        if (controler != null) {
            ram = controler.get(controler.size() - 1).getSelected();
            ramViewer.setRam((Ram) ram);
        }
    }
    
    private void initMemoryViewer() {
        if (controler != null) {
            leftMem.add(controler.get(0).getSelected());
            rightMem.add(controler.get(1).getSelected());
            
            leftIndex = 0; rightIndex = 1;

            // Modification des labels d'informations
            if (rightMem.get(0).isRam()) {
                currentLeverDisplayed.setText("L1 / RAM");
            } else {
                currentLeverDisplayed.setText("L1 / L2");
            }
            
            if (leftIndex != 1) {
                previousLevelLabel.setText("L" + (leftIndex - 1));
            } else {
                previousLevelLabel.setText("NaN");
            }
            
            if (rightIndex != controler.size() - 1) {
                nextLevelLabel.setText("L" + (leftIndex - 1));
            } else {
                nextLevelLabel.setText("NaN");
            }
            
            
            memoryViewerLeftData.setCache(leftMem.get(0));
            memoryViewerRightData.setCache(rightMem.get(0));
        
        } else {
            leftIndex = 0; rightIndex = 1;
            nextLevelLabel.setText("NaN");
            previousLevelLabel.setText("NaN");
            currentLeverDisplayed.setText("Pas de modèle de cache sauvegardé");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        bottomPanel = new javax.swing.JPanel();
        previousLevelButton = new javax.swing.JButton();
        currentLeverDisplayed = new javax.swing.JLabel();
        nextLevelButton = new javax.swing.JButton();
        previousLevelLabel = new javax.swing.JLabel();
        nextLevelLabel = new javax.swing.JLabel();
        controlsPanel = new javax.swing.JPanel();
        editCacheButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        stepInButton = new javax.swing.JButton();
        buildButton = new javax.swing.JButton();
        missCountLabel = new javax.swing.JLabel();
        hitsCountLabel = new javax.swing.JLabel();
        instrLabel = new javax.swing.JLabel();
        jumpInButton = new javax.swing.JButton();
        memorySpliter = new javax.swing.JSplitPane();
        tabbedPaneRight = new javax.swing.JTabbedPane();
        memoryViewerRightData = new application.swing_utils.MemoryViewer();
        memoryViewerRightInstruction = new application.swing_utils.MemoryViewer();
        tabbedPaneLeft = new javax.swing.JTabbedPane();
        memoryViewerLeftData = new application.swing_utils.MemoryViewer();
        memoryViewerLeftInstruction = new application.swing_utils.MemoryViewer();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importFileMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        onlineDocMenuItem = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cache Simulator");

        jPanel1.setLayout(new java.awt.BorderLayout());

        bottomPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bottomPanel.setMinimumSize(new java.awt.Dimension(0, 30));
        bottomPanel.setLayout(new java.awt.GridBagLayout());

        previousLevelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/left_arrow.png"))); // NOI18N
        previousLevelButton.setToolTipText("Previous cache level");
        previousLevelButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        previousLevelButton.setBorderPainted(false);
        previousLevelButton.setContentAreaFilled(false);
        previousLevelButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/left_arrow_disabled.png"))); // NOI18N
        previousLevelButton.setFocusPainted(false);
        previousLevelButton.setMaximumSize(new java.awt.Dimension(53, 30));
        previousLevelButton.setMinimumSize(new java.awt.Dimension(53, 30));
        previousLevelButton.setPreferredSize(new java.awt.Dimension(53, 30));
        previousLevelButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/left_arrow_pressed.png"))); // NOI18N
        previousLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousLevelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        bottomPanel.add(previousLevelButton, gridBagConstraints);

        currentLeverDisplayed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentLeverDisplayed.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        bottomPanel.add(currentLeverDisplayed, gridBagConstraints);

        nextLevelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/right_arrow.png"))); // NOI18N
        nextLevelButton.setToolTipText("next cache level");
        nextLevelButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        nextLevelButton.setBorderPainted(false);
        nextLevelButton.setContentAreaFilled(false);
        nextLevelButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/right_arrow_disabled.png"))); // NOI18N
        nextLevelButton.setFocusPainted(false);
        nextLevelButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/right_arrow_pressed.png"))); // NOI18N
        nextLevelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextLevelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        bottomPanel.add(nextLevelButton, gridBagConstraints);

        previousLevelLabel.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        bottomPanel.add(previousLevelLabel, gridBagConstraints);

        nextLevelLabel.setText("jLabel2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        bottomPanel.add(nextLevelLabel, gridBagConstraints);

        jPanel1.add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        controlsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        editCacheButton.setText("Edit Cache");
        editCacheButton.setToolTipText("Edit the cache configuration");
        editCacheButton.setFocusPainted(false);
        editCacheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCacheButtonActionPerformed(evt);
            }
        });

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/play.png"))); // NOI18N
        runButton.setToolTipText("Run");
        runButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        runButton.setBorderPainted(false);
        runButton.setContentAreaFilled(false);
        runButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/play_disabled.png"))); // NOI18N
        runButton.setEnabled(false);
        runButton.setFocusPainted(false);
        runButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/play_pressed.png"))); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/pause.png"))); // NOI18N
        pauseButton.setToolTipText("Pause");
        pauseButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pauseButton.setBorderPainted(false);
        pauseButton.setContentAreaFilled(false);
        pauseButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/pause_disabled.png"))); // NOI18N
        pauseButton.setEnabled(false);
        pauseButton.setFocusPainted(false);
        pauseButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/pause_pressed.png"))); // NOI18N
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/stop.png"))); // NOI18N
        stopButton.setToolTipText("Stop");
        stopButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        stopButton.setBorderPainted(false);
        stopButton.setContentAreaFilled(false);
        stopButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/stop_disabled.png"))); // NOI18N
        stopButton.setEnabled(false);
        stopButton.setFocusPainted(false);
        stopButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/stop_pressed.png"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        stepInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/step_in.png"))); // NOI18N
        stepInButton.setToolTipText("Step In");
        stepInButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        stepInButton.setBorderPainted(false);
        stepInButton.setContentAreaFilled(false);
        stepInButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/step_in_disabled.png"))); // NOI18N
        stepInButton.setEnabled(false);
        stepInButton.setFocusPainted(false);
        stepInButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/step_in_pressed.png"))); // NOI18N
        stepInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepInButtonActionPerformed(evt);
            }
        });

        buildButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/build.png"))); // NOI18N
        buildButton.setToolTipText("Build and launch simulation");
        buildButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        buildButton.setBorderPainted(false);
        buildButton.setContentAreaFilled(false);
        buildButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/build_disabled.png"))); // NOI18N
        buildButton.setFocusPainted(false);
        buildButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/build_pressed.png"))); // NOI18N
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        missCountLabel.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        missCountLabel.setText("Miss: ");

        hitsCountLabel.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        hitsCountLabel.setText("Hits:");

        instrLabel.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        instrLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        instrLabel.setText("-");

        jumpInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/jump_in.png"))); // NOI18N
        jumpInButton.setToolTipText("Run to next data access");
        jumpInButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jumpInButton.setBorderPainted(false);
        jumpInButton.setContentAreaFilled(false);
        jumpInButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/jump_in_disabled.png"))); // NOI18N
        jumpInButton.setEnabled(false);
        jumpInButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/jump_in_pressed.png"))); // NOI18N
        jumpInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jumpInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlsPanelLayout = new javax.swing.GroupLayout(controlsPanel);
        controlsPanel.setLayout(controlsPanelLayout);
        controlsPanelLayout.setHorizontalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buildButton)
                .addGap(27, 27, 27)
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepInButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jumpInButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(instrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(missCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hitsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editCacheButton))
        );
        controlsPanelLayout.setVerticalGroup(
            controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pauseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(stepInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(controlsPanelLayout.createSequentialGroup()
                .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buildButton)
                    .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(hitsCountLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editCacheButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(controlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(missCountLabel)
                            .addComponent(instrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jumpInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.add(controlsPanel, java.awt.BorderLayout.PAGE_START);

        memorySpliter.setBorder(null);
        memorySpliter.setDividerLocation(420);

        tabbedPaneRight.addTab("Data", memoryViewerRightData);
        tabbedPaneRight.addTab("Instrution", memoryViewerRightInstruction);

        memorySpliter.setRightComponent(tabbedPaneRight);

        tabbedPaneLeft.addTab("Data", memoryViewerLeftData);
        tabbedPaneLeft.addTab("Instructions", memoryViewerLeftInstruction);

        memorySpliter.setLeftComponent(tabbedPaneLeft);

        jPanel1.add(memorySpliter, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        importFileMenuItem.setText("Import File");
        importFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importFileMenuItem);

        jSeparator1.setBackground(new java.awt.Color(1, 1, 1));
        jSeparator1.setMaximumSize(new java.awt.Dimension(32767, 2));
        jSeparator1.setMinimumSize(new java.awt.Dimension(2, 2));
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 2));
        fileMenu.add(jSeparator1);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");
        mainMenuBar.add(editMenu);

        onlineDocMenuItem.setText("Help");

        jMenuItem2.setText("Online Doc");
        onlineDocMenuItem.add(jMenuItem2);

        aboutMenuItem.setText("About");
        onlineDocMenuItem.add(aboutMenuItem);

        mainMenuBar.add(onlineDocMenuItem);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileMenuItemActionPerformed
        this.filesEditor.setVisible(true);
        this.filesEditor.importFile();
    }//GEN-LAST:event_importFileMenuItemActionPerformed

    private void editCacheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCacheButtonActionPerformed
        if (this.cacheEditor == null) {
            this.cacheEditor = new CacheEditor(this);
        }
        this.cacheEditor.setVisible(true);
    }//GEN-LAST:event_editCacheButtonActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonActionPerformed
        if (controler == null) {
            //TODO message d'erreur
            return;
        }
        
        execPath = this.filesEditor.getExecPath();
        if (execPath == null) {
            return;
        }
        this.buildButton.setEnabled(false);
        this.stepInButton.setEnabled(true);
        this.runButton.setEnabled(true);
        this.stopButton.setEnabled(true);
    }//GEN-LAST:event_buildButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (allInOne == null) {
                Thread t = new Thread() {
                    @Override
                    public void run() {
                        allInOne = new Server_AllInOne(controler, CacheSimulator.this);
                        allInOne.start();
                    }
            };
            t.start();

            try {
                Thread.sleep(50);
            } catch (InterruptedException ex) {
                Logger.getLogger(CacheSimulator.class.getName()).log(Level.SEVERE, null, ex);
            }

            Runtime runtime = Runtime.getRuntime();
            try {
                assemblySim = runtime.exec(filesEditor.projectPath + "/application/arm_sim/simulator " + execPath);
            } catch (IOException ex) {
                Logger.getLogger(CacheSimulator.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        else {
            allInOne.tooglePause();
        }

        this.stopButton.setEnabled(true);
        this.stepInButton.setEnabled(false);
        this.runButton.setEnabled(false);
        this.pauseButton.setEnabled(true);
        this.buildButton.setEnabled(false);
    }//GEN-LAST:event_runButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (allInOne != null) {
            allInOne.kill();
            allInOne = null;
        }
        
        if (stepByStep != null) {
            stepByStep.kill();
            stepByStep = null;
        }
        
        this.stopButton.setEnabled(false);
        this.stepInButton.setEnabled(false);
        this.runButton.setEnabled(false);
        this.pauseButton.setEnabled(false);
        this.buildButton.setEnabled(true);
        this.jumpInButton.setEnabled(false);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void stepInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepInButtonActionPerformed
        if (stepByStep == null){
            Thread t = new Thread() {

                @Override
                public void run() {
                    stepByStep = new Server_StepByStep(controler, CacheSimulator.this);
                    stepByStep.start();
                }
            };
            t.start();
        
            try {
                Thread.sleep(50);
            } catch (InterruptedException ex) {
                Logger.getLogger(CacheSimulator.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            Runtime runtime = Runtime.getRuntime();
            try {
                assemblySim = runtime.exec(filesEditor.projectPath + "/application/arm_sim/simulator " + execPath);
            } catch (IOException ex) {
                Logger.getLogger(CacheSimulator.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(CacheSimulator.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            this.stopButton.setEnabled(true);
            this.runButton.setEnabled(false);
            this.pauseButton.setEnabled(false);
            this.buildButton.setEnabled(false);
            this.jumpInButton.setEnabled(true);
        }

        String instr = stepByStep.nextStep();
        this.instrLabel.setText(instr);
        this.missCountLabel.setText("Miss: " + controler.getTotalMiss());
        this.hitsCountLabel.setText("Hits: " + controler.getTotalHit());
        
    }//GEN-LAST:event_stepInButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        allInOne.tooglePause();

        this.runButton.setEnabled(true);
        this.pauseButton.setEnabled(false);
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void previousLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousLevelButtonActionPerformed
        if (leftIndex > 0 && controler != null) {
            leftIndex--;
            rightIndex--;

            refresh();
        }
    }//GEN-LAST:event_previousLevelButtonActionPerformed

    private void nextLevelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextLevelButtonActionPerformed
        if (controler != null && rightIndex < controler.size() - 1) {
            leftIndex++;
            rightIndex++;
            
            refresh();
        }
    }//GEN-LAST:event_nextLevelButtonActionPerformed

    private void jumpInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jumpInButtonActionPerformed
        if(stepByStep != null) {
            this.stepInButton.setEnabled(false);
            this.jumpInButton.setEnabled(false);
            
            ArmParser parser = new ArmParser();
            String instr;
            do {
                instr = stepByStep.nextStep();
            } while (! parser.isMemoryAccess(instr));
            this.instrLabel.setText(instr);
            
            this.stepInButton.setEnabled(true);
            this.jumpInButton.setEnabled(true);
        }
    }//GEN-LAST:event_jumpInButtonActionPerformed

    public void refresh() {
        if (controler != null) {
            // La ram est toujours situé sur le dernier layer de l'architecture mémoire
            ram = controler.get(controler.size() - 1).getSelected();

            // leftIndex nous donne la position du layer affiché dans le panneau
            // de gauche, rightIndex celui du panneau de droite.
            // leftIndex et rightIndex sont toujours décalé de 1
            
            // label de la fleche de gauche
            String label = "";
            if (leftIndex == 0) {
                label = "NaN";
                
            } else {
                label = "L" + (leftIndex + 1) + " / L" + (rightIndex + 1);
            }
            previousLevelLabel.setText(label);

            // label de la fleche de droite
            if (rightIndex + 1 == controler.size() - 1) {
                label = "L" + (rightIndex + 1) + " / RAM";
                
            } else {
                label = "L" + (rightIndex + 1) + " / L" + (rightIndex + 2);
            }
            nextLevelLabel.setText(label);

            // label de l'affichage courant
            if (rightIndex == controler.size() - 1) {
                label = "L" + (leftIndex + 1) + " / RAM";
                
            } else {
                label = "L" + (leftIndex + 1) + " / L"  + (rightIndex + 1);
            }
            currentLeverDisplayed.setText(label);

            set();
        }
    }
    
    private void set() {
        // panneau de gauche
        leftMem.clear();
        leftMem.add(controler.get(leftIndex).getDataCache());
        leftMem.add(controler.get(leftIndex).getInstructionCache());
        leftMem.add(controler.get(leftIndex).getUnitedCache());
        
        JTabbedPane tplL = new JTabbedPane();
        MemoryViewer mv1L, mv2L;
        // Si le panneau doit afficher un cache unifié.
        if (leftMem.get(2) != null) {
            mv1L = new MemoryViewer();
            mv1L.setCache(leftMem.get(2));
            tplL.addTab("United", mv1L);
        }
        
        // Si le pânneau doit afficher les deux caches
        else if (leftMem.get(0) != null && leftMem.get(1) != null) {
            mv1L = new MemoryViewer();
            mv2L = new MemoryViewer();

            mv1L.setCache(leftMem.get(0));
            mv2L.setCache(leftMem.get(1));

            tplL.addTab("Data", mv1L);
            tplL.addTab("Instruction", mv2L);
        
        } else  {   // seulement l'un deux
            mv1L = new MemoryViewer();
            if (leftMem.get(0) != null) {       // DATA
                mv1L.setCache(leftMem.get(0));
                tplL.addTab("Data", mv1L);
                
            } else { 
                mv1L.setCache(leftMem.get(1));
                tplL.addTab("Instruction", mv1L);
            }
        }
        memorySpliter.setLeftComponent(tplL);
        

        /* Panneau de gauche
        leftMem.clear();
        memorySpliter.setLeftComponent(tabbedPaneLeft);
        leftMem.add(controler.get(leftIndex).getDataCache());
        leftMem.add(controler.get(leftIndex).getInstructionCache());
        leftMem.add(controler.get(leftIndex).getUnitedCache());
        
        if (leftMem.get(0) != null) {
            memoryViewerLeftData.setCache(leftMem.get(0));
            tabbedPaneLeft.setSelectedIndex(0);
            tabbedPaneLeft.setTitleAt(0, "Data");
        }
        
        if (leftMem.get(1) != null) {
            memoryViewerLeftInstruction.setCache(leftMem.get(1));
            tabbedPaneLeft.setSelectedIndex(1);
            tabbedPaneLeft.setTitleAt(1, "Instruction");
        }
        
        if (leftMem.get(0) == null && leftMem.get(1) == null && 
                leftMem.get(2) != null) {
            memoryViewerLeftData.setCache(leftMem.get(2));
            tabbedPaneLeft.setSelectedIndex(0);
            tabbedPaneLeft.setTitleAt(0, "United");
            tabbedPaneLeft.setTitleAt(1, "---");
            tabbedPaneLeft.setEnabledAt(1, false);
        } */
        
        // panneau de droite Ram ou pas Ram
        if (!controler.get(rightIndex).isRam()) {
            rightMem.clear();
            rightMem.add(controler.get(rightIndex).getDataCache());
            rightMem.add(controler.get(rightIndex).getInstructionCache());
            rightMem.add(controler.get(rightIndex).getUnitedCache());

            JTabbedPane tplR = new JTabbedPane();
            MemoryViewer mv1R, mv2R;
            // Si le panneau doit afficher un cache unifié.
            if (rightMem.get(2) != null) {
                mv1R = new MemoryViewer();
                mv1R.setCache(rightMem.get(2));
                tplR.addTab("United", mv1R);
                memorySpliter.setRightComponent(tplR);
            }

            // Si le pânneau doit afficher les deux caches
            else if (rightMem.get(0) != null && rightMem.get(1) != null) {
                mv1R = new MemoryViewer();
                mv2R = new MemoryViewer();

                mv1R.setCache(rightMem.get(0));
                mv2R.setCache(rightMem.get(1));

                tplR.addTab("Data", mv1R);
                tplR.addTab("Instruction", mv2R);
                memorySpliter.setRightComponent(tplR);

            } else  {   // seulement l'un deux
                mv1R = new MemoryViewer();
                if (rightMem.get(0) != null) {       // DATA
                    mv1R.setCache(rightMem.get(0));
                    tplR.addTab("Data", mv1R);

                } else { 
                    mv1R.setCache(rightMem.get(1));
                    tplR.addTab("Instruction", mv1R);
                }

                memorySpliter.setRightComponent(tplR);
            }
        
//            rightMem.clear();
//            memorySpliter.setRightComponent(tabbedPaneRight);
//            rightMem.add(controler.get(rightIndex).getDataCache());
//            rightMem.add(controler.get(rightIndex).getInstructionCache());
//            rightMem.add(controler.get(rightIndex).getUnitedCache());
//
//            if (rightMem.get(0) != null) {
//                memoryViewerRightData.setCache(rightMem.get(0));
//                tabbedPaneRight.setSelectedIndex(0);
//                tabbedPaneRight.setTitleAt(0, "Data");
//            }
//
//            if (rightMem.get(1) != null) {
//                memoryViewerRightInstruction.setCache(rightMem.get(1));
//                tabbedPaneRight.setSelectedIndex(1);
//                tabbedPaneRight.setTitleAt(1, "Instruction");
//            }
//
//            if (rightMem.get(0) == null && rightMem.get(1) == null &&
//                    rightMem.get(1) != null) {
//                memoryViewerRightData.setCache(rightMem.get(2));
//                tabbedPaneRight.setSelectedIndex(0);
//                tabbedPaneRight.setTitleAt(0, "United");
//                tabbedPaneRight.setTitleAt(1, "---");
//                tabbedPaneRight.setEnabledAt(1, false);
//            }
        
        } else {
            ramViewer.setRam((Ram) ram);
            memorySpliter.setRightComponent(ramViewer);
        }
        
        // On redimensionne les panneaux aux bonne taille
//        memorySpliter.setDividerLocation(
//                (double) tabbedPaneLeft.getWidth() /  (double) memorySpliter.getWidth());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the default system's look and feel */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException |
                InstantiationException |
                IllegalAccessException |
                javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CacheSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new CacheSimulator().setVisible(true);
            }
        });
    }

    public static Controler controler;
    private String execPath;
    private final TextEditor filesEditor;
    private CacheEditor cacheEditor;
    private Server_AllInOne allInOne;
    private Server_StepByStep stepByStep;
    private Process assemblySim;
    private RamViewer ramViewer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton buildButton;
    private javax.swing.JPanel controlsPanel;
    private javax.swing.JLabel currentLeverDisplayed;
    private javax.swing.JButton editCacheButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel hitsCountLabel;
    private javax.swing.JMenuItem importFileMenuItem;
    private javax.swing.JLabel instrLabel;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton jumpInButton;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JSplitPane memorySpliter;
    private application.swing_utils.MemoryViewer memoryViewerLeftData;
    private application.swing_utils.MemoryViewer memoryViewerLeftInstruction;
    private application.swing_utils.MemoryViewer memoryViewerRightData;
    private application.swing_utils.MemoryViewer memoryViewerRightInstruction;
    private javax.swing.JLabel missCountLabel;
    private javax.swing.JButton nextLevelButton;
    private javax.swing.JLabel nextLevelLabel;
    private javax.swing.JMenu onlineDocMenuItem;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton previousLevelButton;
    private javax.swing.JLabel previousLevelLabel;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton runButton;
    private javax.swing.JButton stepInButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JTabbedPane tabbedPaneLeft;
    private javax.swing.JTabbedPane tabbedPaneRight;
    // End of variables declaration//GEN-END:variables
}
